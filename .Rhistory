nums<-readline(prompt ="enter a series of number:")
nums<-strsplit(nums,"")[[1]]
nums<-as.numeric(nums)
result_max<-max(nums)
result_min<-min(nums)
result_avg<-mean(nums)
result_sum<-sum(nums)
result_sqrt<-sqrt(nums)
result_round<-round(nums)
cat("maximum of values:",result_max,"\n")
cat("minimum of value:",result_min,"\n")
cat("average value:",result_avg,"\n")
cat("sum of values:",result_sum,"\n")
cat("square root:",result_sqrt,"\n")
cat("round:",result_round,"\n")
nums(1,2,3,5,6)
result_max<-max(nums)
nums<-c(1,2,3,5,6)
result_max<-max(nums)
result_min<-min(nums)
result_avg<-mean(nums)
result_sum<-sum(nums)
result_sqrt<-sqrt(nums)
result_round<-round(nums)
cat("maximum of values:",result_max,"\n")
cat("minimum of value:",result_min,"\n")
cat("average value:",result_avg,"\n")
cat("sum of values:",result_sum,"\n")
cat("square root:",result_sqrt,"\n")
cat("round:",result_round,"\n")
nums<-readline(prompt="enter a series of number:")
nums<-strsplit(nums,"")[[1]]
nums<-as.numeric(nums)
result_max<-max(nums)
result_min<-min(nums)
result_avg<-mean(nums)
nums<-readline(prompt="enter a series of number:")
result_min<-min(nums)
result_avg<-mean(nums)
result_sum<-sum(nums)
nums<-readline(prompt="enter a series of number:")
nums<-strsplit(nums,"")[[1]]
nums<-as.numeric(nums)
result_max<-max(nums)
result_min<-min(nums)
result_avg<-mean(nums)
result_sum<-sum(nums)
result_sqrt<-sqrt(nums)
result_round<-round(nums)
cat("maximum of values:",result_max,"\n")
cat("minimum of value:",result_min,"\n")
cat("average value:",result_avg,"\n")
cat("sum of values:",result_sum,"\n")
cat("square root:",result_sqrt,"\n")
cat("round:",result_round,"\n")
nums<-readline(prompt="enter a series of number:")
nums<-strsplit(nums,"")[[1]]
nums<-as.numeric(nums)
result_max<-max(nums)
result_min<-min(nums)
result_avg<-mean(nums)
result_sum<-sum(nums)
result_sqrt<-sqrt(nums)
result_round<-round(nums)
cat("maximum of values:",result_max,"\n")
cat("minimum of value:",result_min,"\n")
cat("average value:",result_avg,"\n")
cat("sum of values:",result_sum,"\n")
cat("square root:",result_sqrt,"\n")
cat("round:",result_round,"\n")
library('class')
library('caret')
aa=read.csv('diabetes (1).csv')
class(aa$Insulin)
str(aa)
aa[,'class']=factor(aa[,'class'])
str(aa)
mean(aa$Age)
summary(aa)
train=aa[1:500,]
test=aa[501:768,]
a=knn(train[,-9],test[,-9],train$class,k=2)
a
confusion=table(a,test$class)
confusion
sum(diag(confusion))/nrow(test)
confusionMatrix(a,test$class)
data <- data.frame(
Years_Exp = c(1.1, 1.3, 1.5, 2.0, 2.2, 2.9, 3.0, 3.2, 3.2, 3.7),
Salary = c(39343.00, 46205.00, 37731.00, 43525.00,
39891.00, 56642.00, 60150.00, 54445.00, 64445.00, 57189.00)
)
plot(data$Years_Exp, data$Salary,
xlab = "Years Experienced",
ylab = "Salary",
main = "Scatter Plot of Years Experienced vs Salary")
install.packages('caTools')
library(caTools)
split = sample.split(data$Salary, SplitRatio = 0.7)
trainingset = subset(data, split == TRUE)
testset = subset(data, split == FALSE)
# Fitting Simple Linear Regression to the Training set
lm.r= lm(formula = Salary ~ Years_Exp,
data = trainingset)
coef(lm.r)
library(ggplot2)
# Predicting the Test set results
ypred = predict(lm.r, newdata = testset)
ggplot() + geom_point(aes(x = trainingset$Years_Ex,
y = trainingset$Salary), colour = 'red') +
geom_line(aes(x = trainingset$Years_Ex,
y = predict(lm.r, newdata = trainingset)), colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
data(iris)
head(iris)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
# Create a scatter plot
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Petal.Length, size = Petal.Width, shape = Species)) +
geom_point() +
scale_color_gradient(low = "blue", high = "red") +
labs(title = "Iris Dataset: Four-Dimensional Visualization", x = "Sepal Length", y = "Sepal Width", color = "Petal Length", size = "Petal Width") +
theme_minimal()
# Apply k-means clustering with k = 3 (for the three species of Iris)
set.seed(20) # for reproducibility
iris_cluster <- kmeans(iris[, 1:4], centers = 3)
iris_cluster$cluster
# Add the cluster assignments to the iris dataset
iris$Cluster <- as.factor(iris_cluster$cluster)
# Plot the clusters
library(ggplot2)
ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Cluster)) +
geom_point() +
labs(title = "K-means Clustering of Iris Dataset")
# attach additional library for a confusion matrix
install.packages("caret")
library(caret)
# relabeling
iris$ClusterGuessedName <- factor(iris$Cluster, labels = c("setosa", "versicolor", "virginica"))
# Create a confusion matrix
confusionMatrix(iris$ClusterGuessedName, iris$Species)
